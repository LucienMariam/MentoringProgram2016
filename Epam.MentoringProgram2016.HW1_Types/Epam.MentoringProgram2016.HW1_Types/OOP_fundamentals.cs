// Access modifiers
/*
public: члены, помеченные как public доступны везде как внутри своего namespace, так и при обращении к ним снаружи из других namespace-ов,
также доступны при обращении к ним из других сборок. На члены с доступом типа public не накладываются никаких ограничений доступа.

protected: CLR читает этот модификатор как Family. Члены, помеченные как protected доступны внутри своего типа, во всех вложенных в этот тип классах,
а также во всех унаследованных от него типах. Обратиться к protected члену можно и из других сборок.

internal: CLR читает этот модификатор как Assembly. Члены, помеченные как internal имеют уровень доступа как public, но только внутри своей сборки.

protected internal: CLR читает этот модификатор как Family or Assembly. Члены, помеченные как protected internal доступны внутри своего типа, во всех вложенных в этот тип классах,
а также во всех унаследованных от него типах, но только в пределах своей сборки. Обратиться к protected члену из других сборок нельзя.

private: Члены, помеченные как private доступны только внутри своего типа, а также во всех вложенных в этот тип классах.
*/

// Static vs Instance classes, methods
/*

*/

// Interface and Abstract class
/*
Интерфейс определяет своего рода контракт, согласно которому все наследники обязуются дать реализацию функционала интерфейса.
Интерфейсы удобно накладывать на логические сущности разрабатываемой системы, которые имеют конечные use case-ы эксплуатации системы со стороны пользователя.
Также интерфейсы удобно использовать для унифицированного поведения различных логических сущностей внутри разрабатываемой системы.
И конечно же интерфейсы позволяют грамотно структурировать функциональность кода, например, используя паттерны проектирования.

Интерфейс может содержать только публичные абстрактные методы, ивенты, индексаторы и свойства. 

Абстрактный же класс полезен в том случае, когда уместно вынести определённую default реализацию в одну сущность для повторного использования в классах наследниках.
Нельзя создать экземпляр абстрактного класса. Его конструктор не может быть public.
*/

// Object vs Class
/*

*/

// Multiple vs Single Inheritance
/*

*/

// Polymorphism
/*

*/